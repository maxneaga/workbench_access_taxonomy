<?php

/**
 * @file
 * Workbench Access Taxonomy.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Session\AccountInterface;

/**
 * Implements hook_help().
 */
function workbench_access_taxonomy_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.workbench_access_taxonomy':
      return t('
        <h2>Workbench Access extension for Taxonomy</h2>
        <h3>About</h3>
        <p>This module extends 
        <a href="https://www.drupal.org/project/workbench_access">Workbench Access</a> 
        functionality to control access to editing taxonomies.</p>
        <h3>Usage</h3>
        <p>Upon installation, module configuration is available under the 
        "Taxonomy" tab of the general Workbench Access settings.</p>
      ');
  }
}

/**
 * Implements hook_ENTITY_TYPE_access().
 *
 * Checks if editing or deleting taxonomy
 * Makes sure workbench access control is configured for Taxonomy scheme
 * Checks if access control field exists on the taxonomy term that is touched.
 */
function workbench_access_taxonomy_taxonomy_term_access(EntityInterface $entity, $op, AccountInterface $account) {
  // Get access control field machine name from the settings.
  $config = \Drupal::config('workbench_access_taxonomy.settings');
  $access_control_field = $config->get('workbench_access_taxonomy.access_control_field');

  // We don't care about viewing.
  if ($op == 'view' || $account->hasPermission('bypass workbench access')) {
    return AccessResult::neutral();
  }

  // Check that workbench access control is configured with.
  // active scheme set to Taxonomy.
  $manager = \Drupal::service('plugin.manager.workbench_access.scheme');
  $workbench_access_control = $manager->getActiveScheme();

  if ($workbench_access_control->id() != 'taxonomy') {
    return AccessResult::neutral();
  }

  // Check if access control field exists, compare its value to the.
  // user's sections.
  // Get entity's vocabulary.
  $vocabulary = $entity->bundle();
  $entityManager = \Drupal::service('entity_field.manager');
  // Get all fields on the vocabulary.
  $fields = $entityManager->getFieldDefinitions('taxonomy_term', $vocabulary);
  // See if access control field exists on the vocabulary.
  if (array_key_exists($access_control_field, $fields)) {
    // Get all sections that the term is assigned to.
    $term_sections = $workbench_access_control->getEntityValues($entity, $access_control_field);
    // If no value is set on the term, ignore (no sections assigned)
    if (empty($term_sections)) {
      return AccessResult::neutral();
    }

    // Get user's sections.
    $userSectionStorage = \Drupal::service('workbench_access.user_section_storage');
    $user_sections = $userSectionStorage->getUserSections();
    if (empty($user_sections)) {
      return AccessResult::forbidden();
    }

    // Check the tree of sections of the term against the $user.
    // Return neutral if in tree, forbidden if not.
    if ($manager->checkTree($term_sections, $user_sections)) {
      return AccessResult::neutral();
    }
    return AccessResult::forbidden();
  }

  return AccessResult::neutral();
}
